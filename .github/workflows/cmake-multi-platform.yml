# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  release:
    types: [created]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env: 
      USERNAME: MostafaNanticock
      VCPKG_EXE: ${{ github.workspace }}/vcpkg/vcpkg
      FEED_URL: https://nuget.pkg.github.com/MostafaNanticock/index.json
      VCPKG_BINARY_SOURCES: "clear;nuget,https://nuget.pkg.github.com/MostafaNanticock/index.json,readwrite"

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [windows-latest] # [ubuntu-latest, macos-latest]
        build_type: [Release]
        c_compiler: [cl, gcc, clang] # [gcc, clang]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    
    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
        TAG_NAME="${{ github.ref_name }}"
        BUILD_ENV="${{ matrix.os }}-${{ matrix.c_compiler }}"
        PACKAGE_NAME="${REPO_NAME}_${TAG_NAME}_${BUILD_ENV}.zip"
        BUILD_OUTPUT_DIR="${{ github.workspace }}/build"
        PACKAGE_PATH="${BUILD_OUTPUT_DIR}/${PACKAGE_NAME}"

        echo "repo-name=$REPO_NAME" >> "$GITHUB_OUTPUT"
        echo "tag-name=$TAG_NAME" >> "$GITHUB_OUTPUT"
        echo "build-env=$BUILD_ENV" >> "$GITHUB_OUTPUT"
        echo "package-name=$PACKAGE_NAME" >> "$GITHUB_OUTPUT"
        echo "build-output-dir=${BUILD_OUTPUT_DIR//'\\'/'/'}" >> "$GITHUB_OUTPUT"
        echo "package-path=${PACKAGE_PATH//'\\'/'/'}" >> "$GITHUB_OUTPUT"

    - name: Install vcpkg on Windows
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        .\vcpkg\bootstrap-vcpkg.bat
        "$env:GITHUB_PATH", "${{ github.workspace }}\vcpkg"

    - name: Install vcpkg on Unix
      if: runner.os != 'Windows'
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        ./vcpkg/bootstrap-vcpkg.sh
        echo "${{ github.workspace }}/vcpkg" >> $GITHUB_PATH

    - name: Export GitHub Actions cache environment variables
      uses: actions/github-script@v7
      with:
        script: |
          core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
          core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

    - name: Add NuGet sources
      shell: pwsh
      run: |
        & "${{ env.VCPKG_EXE }}" nuget `
          sources add `
          -Source "${{ env.FEED_URL }}" `
          -StorePasswordInClearText `
          -Name GitHubPackages `
          -UserName "${{ env.USERNAME }}" `
          -Password "${{ secrets.GITHUB_TOKEN }}"
        & "${{ env.VCPKG_EXE }}" nuget `
          setapikey "${{ secrets.GITHUB_TOKEN }}" `
          -Source "${{ env.FEED_URL }}"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Package
      id: package
      shell: pwsh
      run: |
        Set-Location -Path ${{ steps.strings.outputs.build-output-dir }}
        7z a -tzip ${{ steps.strings.outputs.package-path }} release/*
        $package_path = "${{ steps.strings.outputs.package-path }}".Replace('\', '/')
        echo "package_path=$package_path" >> $env:GITHUB_OUTPUT

    - name: Upload binaries to release
      uses: softprops/action-gh-release@v1
      if: github.event_name == 'release'
      with:
        # input file must use forward slashes, or otherwise this will fail
        files: ${{ steps.package.outputs.package_path }}
        token: ${{ secrets.GITHUB_TOKEN }}